3+3
3+3
setwd("Z:/data processing/trial_dofiles")
setwd("X:/data processing/trial_dofiles")
tryCatch({
setwd("X:/data processing/trial_dofiles")
}, error=function(err){
setwd("Z:/data processing/trial_dofiles")
})
CLINIC_INTERVENTION_DATE <- "2018-03-04"
CLINIC_CONTROL_DATE <- "2018-03-18"
tryCatch({
setwd("X:/data processing/")
}, error=function(err){
setwd("Z:/data processing/")
})
desiredPackages <- c("stringr","lubridate","data.table","bit64","readxl")
for(i in desiredPackages) if(!i %in% rownames(installed.packages())) install.packages(i)
library(data.table)
# date stuff
MAX_YEAR <- stringr::str_sub(CLINIC_CONTROL_DATE,1,4)
MAX_MONTH <- substr(CLINIC_CONTROL_DATE,6,7)
DATE <- lubridate::today()
isControl <- TRUE
if(isControl){
DATA_DATE <- CLINIC_CONTROL_DATE
DATA_RAW <- sprintf("data_raw/e.reg-control/%s",DATA_DATE)
TAG <- "CON"
CLINICAL_OR_CONTROL <- "Control"
}
d <- fread(sprintf(
"%s/%s Demographics.csv",
DATA_RAW,
CLINICAL_OR_CONTROL),
encoding="UTF-8")
if(isControl){
setnames(d,"Instance","uniqueid")
setnames(d,"Created","datecreated")
setnames(d,"Last updated","dateupdated")
setnames(d,"Organisation unit","demoorgunit")
setnames(d,"Organisation unit name","demoorgname")
setnames(d,"Tracked entity","trackedentity")
setnames(d,"Inactive","dummy")
setnames(d,"Identification document type","idtype")
setnames(d,"Data extractor username","")
setnames(d,"Identification document number - control data","demoidnumber")
setnames(d,"First name (الإسم الأول)","firstname")
setnames(d,"Father's Name (اسم الأب)","fathername")
setnames(d,"Husband's Family name (اسم عائلة الزوج)","familyname2")
setnames(d,"Husband's name (اسم الزوج )","husbandname")
setnames(d,"Middle Name (اسم الجد)","middlename")
setnames(d,"Woman family name (اسم عائلة المرأة)","familyname1")
setnames(d,"Village","village")
setnames(d,"City","city")
setnames(d,"Date of Birth","dob")
setnames(d,"Mobile number","mobile")
setnames(d,"Education in years","education")
setnames(d,"Age at marriage","agemarriage")
setnames(d,"Age at first pregnancy","agepregnancy")
setnames(d,"Monthly household income (ILS)","income")
setnames(d,"Number of members in household","members")
d[,street:=""]
d[,camp:=""]
d[,phone:=""]
d[,cosang:=""]
}
d[is.na(demoidnumber), demoidnumber:=c(1:.N)]
mahima <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","isMahimaClinicsTrial1.xlsx"
)))
mahima
d
d <- fread(sprintf(
"%s/%s Demographics.csv",
DATA_RAW,
CLINICAL_OR_CONTROL),
encoding="UTF-8")
d
d <- fread(sprintf(
"%s/%s Demographics.csv",
DATA_RAW,
CLINICAL_OR_CONTROL),
encoding="UTF-8")
if(isControl){
setnames(d,"Instance","uniqueid")
setnames(d,"Created","datecreated")
setnames(d,"Last updated","dateupdated")
setnames(d,"Organisation unit","demoorgunit")
setnames(d,"Organisation unit name","demoorgname")
setnames(d,"Tracked entity","trackedentity")
setnames(d,"Inactive","dummy")
setnames(d,"Identification document type","idtype")
setnames(d,"Data extractor username","")
setnames(d,"Identification document number - control data","demoidnumber")
setnames(d,"First name (الإسم الأول)","firstname")
setnames(d,"Father's Name (اسم الأب)","fathername")
setnames(d,"Husband's Family name (اسم عائلة الزوج)","familyname2")
setnames(d,"Husband's name (اسم الزوج )","husbandname")
setnames(d,"Middle Name (اسم الجد)","middlename")
setnames(d,"Woman family name (اسم عائلة المرأة)","familyname1")
setnames(d,"Village","village")
setnames(d,"City","city")
setnames(d,"Date of Birth","dob")
setnames(d,"Mobile number","mobile")
setnames(d,"Education in years","education")
setnames(d,"Age at marriage","agemarriage")
setnames(d,"Age at first pregnancy","agepregnancy")
setnames(d,"Monthly household income (ILS)","income")
setnames(d,"Number of members in household","members")
d[,street:=""]
d[,camp:=""]
d[,phone:=""]
d[,cosang:=""]
}
d[is.na(demoidnumber), demoidnumber:=c(1:.N)]
desiredPackages <- c("stringr","lubridate","data.table","bit64","readxl","openxlsx")
for(i in desiredPackages) if(!i %in% rownames(installed.packages())) install.packages(i)
lubridate::today()
openxlsx::write.xlsx(d,"~/Desktop/test.xlsx")
fwrite(d,"~/Desktop/test.txt")
Desktop
lists.files("~")
lists.files("~/")
list.files("~/")
list.files("~/..")
list.files("~/")
fwrite(d,"C:/Users/Mervett_Isbeih/Desktop/test.txt")
mahima <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","isMahimaClinicsTrial1.xlsx"
)))
mahima
d[,isMahimaClinicsTrial1:=FALSE]
c(1:4) %in% c(3:10)
bookorgnames <- readxl::read_excel(file.path(
"data_raw","structural_data","bad_to_good_bookorgname.xlsx"
))
setnames(bookorgnames,"badbookorgname","demoorgname")
bookorgnames
d
bookorgnames <- readxl::read_excel(file.path(
"data_raw","structural_data","bad_to_good_bookorgname.xlsx"
))
setnames(bookorgnames,"badbookorgname","demoorgname")
dim(d)
d <- merge(d,bookorgnames,by="demoorgname",all.x=T)
dim(d)
aviccena_id_numbers <- readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
))
aviccena_id_numbers
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers
aviccena_id_numbers[1,]
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
aviccena_id_numbers
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
aviccena_id_numbers
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
aviccena_id_numbers
names(d)
d[,9]
# fixing id numbers to be aviccena ("the truth")
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
setnames(aviccena_id_numbers,"export","demoidnumber")
dim(d)
d <- merge(d,aviccena_id_numbers,by="demoidnumber",all.x=T)
dim(d)
# overwriting demoidnumber with aviccena if it exists
d[!is.na(aviccena),demoidnumber:=aviccena]
str(aviccena_id_numbers)
d[!is.na(aviccena)]
d[!is.na(aviccena)][1,]
d[!is.na(aviccena)]
d[!is.na(aviccena)]
nrows(aviccena_id_numbers)
nrow(aviccena_id_numbers)
aviccena_id_numbers$demoidnumber
length(unique(aviccena_id_numbers$demoidnumber))
aviccena_id_numbers
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
length(unique(aviccena_id_numbers$demoidnumber))
aviccena_id_numbers
length(unique(aviccena_id_numbers$export))
CLINIC_INTERVENTION_DATE <- "2018-03-04"
CLINIC_CONTROL_DATE <- "2018-03-18"
tryCatch({
setwd("X:/data processing/")
}, error=function(err){
setwd("Z:/data processing/")
})
desiredPackages <- c("stringr","lubridate","data.table","bit64","readxl","openxlsx")
for(i in desiredPackages) if(!i %in% rownames(installed.packages())) install.packages(i)
library(data.table)
# date stuff
MAX_YEAR <- stringr::str_sub(CLINIC_CONTROL_DATE,1,4)
MAX_MONTH <- substr(CLINIC_CONTROL_DATE,6,7)
DATE <- lubridate::today()
isControl <- TRUE
if(isControl){
DATA_DATE <- CLINIC_CONTROL_DATE
DATA_RAW <- sprintf("data_raw/e.reg-control/%s",DATA_DATE)
TAG <- "CON"
CLINICAL_OR_CONTROL <- "Control"
}
d <- fread(sprintf(
"%s/%s Demographics.csv",
DATA_RAW,
CLINICAL_OR_CONTROL),
encoding="UTF-8")
if(isControl){
setnames(d,"Instance","uniqueid")
setnames(d,"Created","datecreated")
setnames(d,"Last updated","dateupdated")
setnames(d,"Organisation unit","demoorgunit")
setnames(d,"Organisation unit name","demoorgname")
setnames(d,"Tracked entity","trackedentity")
setnames(d,"Inactive","dummy")
setnames(d,"Identification document type","idtype")
setnames(d,"Data extractor username","dataextractor")
setnames(d,"Identification document number - control data","demoidnumber")
setnames(d,"First name (الإسم الأول)","firstname")
setnames(d,"Father's Name (اسم الأب)","fathername")
setnames(d,"Husband's Family name (اسم عائلة الزوج)","familyname2")
setnames(d,"Husband's name (اسم الزوج )","husbandname")
setnames(d,"Middle Name (اسم الجد)","middlename")
setnames(d,"Woman family name (اسم عائلة المرأة)","familyname1")
setnames(d,"Village","village")
setnames(d,"City","city")
setnames(d,"Date of Birth","dob")
setnames(d,"Mobile number","mobile")
setnames(d,"Education in years","education")
setnames(d,"Age at marriage","agemarriage")
setnames(d,"Age at first pregnancy","agepregnancy")
setnames(d,"Monthly household income (ILS)","income")
setnames(d,"Number of members in household","members")
d[,street:=""]
d[,camp:=""]
d[,phone:=""]
d[,cosang:=""]
}
d[is.na(demoidnumber), demoidnumber:=c(1:.N)]
#fwrite(d,"C:/Users/Mervett_Isbeih/Desktop/test.txt")
# adding in a variable for mahima's clniical trial 1
mahima <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","isMahimaClinicsTrial1.xlsx"
)))
d[,isMahimaClinicsTrial1:=FALSE]
d[demoorgunit %in% mahima$demoorgunit,isMahimaClinicsTrial1:=TRUE]
# fixing bookorgnames
bookorgnames <- readxl::read_excel(file.path(
"data_raw","structural_data","bad_to_good_bookorgname.xlsx"
))
setnames(bookorgnames,"badbookorgname","demoorgname")
bookorgnames[,X__1:=NULL]
# joinby demorgname using "bookorgnames", unm(b)
dim(d)
d <- merge(d,bookorgnames,by="demoorgname",all.x=T)
dim(d)
# overwriting demorgname with goodbookorgname if it exists
d[!is.na(goodbookorgname),demoorgname:=goodbookorgname]
# delete goodbookorgname
d[,goodbookorgname:=NULL]
# fixing id numbers to be aviccena ("the truth")
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
sum(aviccena_id_numbers$export %in% d$demoidnumber)
d$demoidnumber
aviccena_id_numbers$export
sum(aviccena_id_numbers$export %in% d$demoidnumber,na.rm=T)
aviccena_id_numbers$export
sum(aviccena_id_numbers$export %in% d$demoidnumber,na.rm=T)
str(aviccena_id_numbers$export)
str(d$demoidnumber)
sum(as.integer64(aviccena_id_numbers$export) %in% d$demoidnumber,na.rm=T)
desiredPackages <- c("stringr",
"lubridate",
"data.table",
"bit64",
"readxl",
"openxlsx",
"bit64")
for(i in desiredPackages) if(!i %in% rownames(installed.packages())) install.packages(i)
sum(bit64::as.integer64(aviccena_id_numbers$export) %in% d$demoidnumber,na.rm=T)
aviccena_id_numbers[,aviccena:=bit64::as.integer64(aviccena)]
str(aviccena_id_numbers)
aviccena_id_numbers[,export:=bit64::as.integer64(export)]
sum(aviccena_id_numbers$export %in% d$demoidnumber,na.rm=T)
aviccena_id_numbers$export[!aviccena_id_numbers$export %in% d$demoidnumber]
sum(aviccena_id_numbers$aviccena %in% d$demoidnumber,na.rm=T)
43+25
nrow(aviccena_id_numbers)
fwrite(aviccena_id_numbers[!export %in% d$demoidnumber],"C:/Users/Mervett_Isbeih/Desktop/test.txt")
fwrite(aviccena_id_numbers[!export %in% d$demoidnumber],"data_debugging/id_numbers_not_matching.txt")
?fwrite
fwrite(aviccena_id_numbers[!export %in% d$demoidnumber],"data_debugging/id_numbers_not_matching.csv")
216-141
as.numeric("3")
as.character(432423423)
d[1,]
d$agemarriage
cut(c(1:10),breaks=c(1,4,5))
?cut
cut(c(1:10),breaks=c(1,4,5,100))
cut(c(1:10),breaks=c(1,4,5,100),include.lowest=T)
cut(c(1:10),breaks=c(0,20,25,30,35,40,200),include.lowest=T)
cut(c(1:10),breaks=c(0,20,25,30,35,40,100),include.lowest=T)
as.numeric(cut(c(1:10),breaks=c(0,20,25,30,35,40,100),include.lowest=T))
d[,agemarriagecat>=as.numeric(cut(agemarriage,breaks=c(0,20,25,30,35,40,100),include.lowest=T))]
d[,agemarriagecat:=as.numeric(cut(agemarriage,breaks=c(0,20,25,30,35,40,100),include.lowest=T))]
CLINIC_INTERVENTION_DATE <- "2018-03-04"
CLINIC_CONTROL_DATE <- "2018-03-18"
tryCatch({
setwd("X:/data processing/")
}, error=function(err){
setwd("Z:/data processing/")
})
desiredPackages <- c("stringr",
"lubridate",
"data.table",
"bit64",
"readxl",
"openxlsx",
"bit64")
for(i in desiredPackages) if(!i %in% rownames(installed.packages())) install.packages(i)
library(data.table)
# date stuff
MAX_YEAR <- stringr::str_sub(CLINIC_CONTROL_DATE,1,4)
MAX_MONTH <- substr(CLINIC_CONTROL_DATE,6,7)
DATE <- lubridate::today()
isControl <- TRUE
if(isControl){
DATA_DATE <- CLINIC_CONTROL_DATE
DATA_RAW <- sprintf("data_raw/e.reg-control/%s",DATA_DATE)
TAG <- "CON"
CLINICAL_OR_CONTROL <- "Control"
}
d <- fread(sprintf(
"%s/%s Demographics.csv",
DATA_RAW,
CLINICAL_OR_CONTROL),
encoding="UTF-8")
if(isControl){
setnames(d,"Instance","uniqueid")
setnames(d,"Created","datecreated")
setnames(d,"Last updated","dateupdated")
setnames(d,"Organisation unit","demoorgunit")
setnames(d,"Organisation unit name","demoorgname")
setnames(d,"Tracked entity","trackedentity")
setnames(d,"Inactive","dummy")
setnames(d,"Identification document type","idtype")
setnames(d,"Data extractor username","dataextractor")
setnames(d,"Identification document number - control data","demoidnumber")
setnames(d,"First name (الإسم الأول)","firstname")
setnames(d,"Father's Name (اسم الأب)","fathername")
setnames(d,"Husband's Family name (اسم عائلة الزوج)","familyname2")
setnames(d,"Husband's name (اسم الزوج )","husbandname")
setnames(d,"Middle Name (اسم الجد)","middlename")
setnames(d,"Woman family name (اسم عائلة المرأة)","familyname1")
setnames(d,"Village","village")
setnames(d,"City","city")
setnames(d,"Date of Birth","dob")
setnames(d,"Mobile number","mobile")
setnames(d,"Education in years","education")
setnames(d,"Age at marriage","agemarriage")
setnames(d,"Age at first pregnancy","agepregnancy")
setnames(d,"Monthly household income (ILS)","income")
setnames(d,"Number of members in household","members")
d[,street:=""]
d[,camp:=""]
d[,phone:=""]
d[,cosang:=""]
}
d[is.na(demoidnumber), demoidnumber:=c(1:.N)]
#fwrite(d,"C:/Users/Mervett_Isbeih/Desktop/test.txt")
# adding in a variable for mahima's clniical trial 1
mahima <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","isMahimaClinicsTrial1.xlsx"
)))
d[,isMahimaClinicsTrial1:=FALSE]
d[demoorgunit %in% mahima$demoorgunit,isMahimaClinicsTrial1:=TRUE]
# fixing bookorgnames
bookorgnames <- readxl::read_excel(file.path(
"data_raw","structural_data","bad_to_good_bookorgname.xlsx"
))
setnames(bookorgnames,"badbookorgname","demoorgname")
bookorgnames[,X__1:=NULL]
# joinby demorgname using "bookorgnames", unm(b)
dim(d)
d <- merge(d,bookorgnames,by="demoorgname",all.x=T)
dim(d)
# overwriting demorgname with goodbookorgname if it exists
d[!is.na(goodbookorgname),demoorgname:=goodbookorgname]
# delete goodbookorgname
d[,goodbookorgname:=NULL]
# fixing id numbers to be aviccena ("the truth")
aviccena_id_numbers <- data.table(readxl::read_excel(file.path(
"data_raw","structural_data","pretrial_export_to_aviccena_id_numbers.xlsx"
)))
aviccena_id_numbers <- aviccena_id_numbers[!is.na(aviccena) & !is.na(export),
c("aviccena","export")]
aviccena_id_numbers[,aviccena:=bit64::as.integer64(aviccena)]
aviccena_id_numbers[,export:=bit64::as.integer64(export)]
# only 43 of these excel numbers match in the data
sum(aviccena_id_numbers$export %in% d$demoidnumber,na.rm=T)
# these are the ones that dont match
aviccena_id_numbers$export[!aviccena_id_numbers$export %in% d$demoidnumber]
# these are the ones that dont match
fwrite(aviccena_id_numbers[!export %in% d$demoidnumber],"data_debugging/id_numbers_not_matching.csv")
setnames(aviccena_id_numbers,"export","demoidnumber")
dim(d)
d <- merge(d,aviccena_id_numbers,by="demoidnumber",all.x=T)
dim(d)
# overwriting demoidnumber with aviccena if it exists
d[!is.na(aviccena),demoidnumber:=aviccena]
# delete aviccena variable/column (because the information has already
# been copied over to demoidnumber
d[,aviccena:=NULL]
RecodeAgeToCategory
d[,agemarriagecat:=as.numeric(cut(agemarriage,
breaks=c(0,20,25,30,35,40,100),
include.lowest=T))]
d[,agepregnancycat:=as.numeric(cut(agepregnancy,
breaks=c(0,20,25,30,35,40,100),
include.lowest=T))]
d[,educationcat:=as.numeric(cut(education,
breaks=c(0,9,13,100),
include.lowest=T))]
xtabs(~d$educationcat)
xtabs(~d$agepregnancycat)
xtabs(~d$agemarriagecat)
d[,avgincome >= income/members]
d[,avgincome := income/members]
